{"version":3,"sources":["components/navbar.component.js","components/forecastwheather.component.js","components/chart.component.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","prop","className","style","id","type","placeholder","spellCheck","onChange","e","changeCity","value","cname","onKeyPress","getData","getWeatherIcone","rangeId","calCelsius","temp","Math","floor","ForecastWheather","props","forecastDetail","weather","main","humidity","temp_max","temp_min","description","dt","d","Date","minutes","getMinutes","toString","length","hours","getHours","ampm","getDay","getMonth","getDate","getFullYear","formatAMPM","dt_txt","ChartCard","data","options","title","display","text","datasets","label","fontSize","fontColor","legend","position","Chart","state","formatedChartData","forecastData","item","labels","backgroundColor","i","push","toDateString","this","chartDetails","slice","charts","map","createChartData","key","Component","api","convertTime","unixTime","substr","CityComponent","city","country","round","parseInt","coords","lat","toFixed","lon","sunrise","sunset","App","getWheatherData","event","a","fetch","cityName","api_call","json","response","console","log","cod","alert","setState","list","cityData","onChangeCity","bind","undefined","chartData","coord","name","currentexercise","target","forecastWeatherList","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iPAGe,SAASA,EAAOC,GAE3B,OACI,yBAAKC,UAAU,uCACX,uBAAGA,UAAU,eAAeC,MAAO,CAAE,OAAU,SAAU,0BAAMD,UAAU,WAAhB,KAAzD,UACA,yBAAKA,UAAU,2BAA2BE,GAAG,QAAQD,MAAO,CAAE,QAAW,UACrE,wBAAID,UAAU,mCAQd,6BACI,2BAAOG,KAAK,OACRH,UAAU,oCACVI,YAAY,YACZC,WAAW,QACXC,SAAU,SAACC,GAAD,OAAOR,EAAKS,WAAWD,IACjCE,MAAOV,EAAKW,MACZC,WAAY,SAACJ,GAAD,OAAOR,EAAKa,QAAQL,SCtBxD,SAASM,EAAgBC,GACrB,QAAQ,GACJ,KAAKA,GAAW,KAAOA,GAAW,IAC9B,MAAO,qBAEX,KAAKA,GAAW,KAAOA,GAAW,IAC9B,MAAO,aAEX,KAAKA,GAAW,KAAOA,GAAW,IAC9B,MAAO,aAEX,KAAKA,GAAW,KAAOA,GAAW,IAC9B,MAAO,aAEX,KAAKA,GAAW,KAAOA,GAAW,IAC9B,MAAO,qBAEX,KAAgB,KAAXA,EACD,MAAO,kBAEX,KAAKA,GAAW,KAAOA,GAAW,IAC9B,MAAO,eAInB,SAASC,EAAWC,GAChB,OAAOC,KAAKC,MAAMF,EAAO,QAad,SAASG,EAAiBC,GACrC,OACI,yBAAKpB,UAAU,wBACX,yBAAKA,UAAU,yBACX,4BACI,uBAAGA,UAAWa,EAAgBO,EAAMC,eAAeC,QAAQ,GAAGpB,OAElE,wBAAIF,UAAU,WACV,2CADJ,OACgC,8BAAOoB,EAAMC,eAAeE,KAAKC,SAAjC,MAEhC,wBAAIxB,UAAU,WACV,4CADJ,OACiC,8BAAOe,EAAWK,EAAMC,eAAeE,KAAKE,UAAU,uBAAGzB,UAAU,oBAEpG,wBAAIA,UAAU,WACV,2CADJ,OACgC,8BAAOe,EAAWK,EAAMC,eAAeE,KAAKG,UAAU,uBAAG1B,UAAU,oBAEnG,uBAAGA,UAAU,YAAYC,MAAO,CAAC,cAAc,QAASmB,EAAMC,eAAeC,QAAQ,GAAGK,aACxF,uBAAG3B,UAAU,YAAYC,MAAO,CAAC,cAAc,QA3B/D,SAAoB2B,GAChB,IAAIC,EAAI,IAAIC,KAAKF,GACbG,EAA8C,GAApCF,EAAEG,aAAaC,WAAWC,OAAc,IAAML,EAAEG,aAAeH,EAAEG,aAC3EG,EAA0C,GAAlCN,EAAEO,WAAWH,WAAWC,OAAc,IAAML,EAAEO,WAAaP,EAAEO,WACrEC,EAAOR,EAAEO,YAAc,GAAK,KAAO,KAGvC,MADW,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAC1CP,EAAES,UAAY,IAFb,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEpDT,EAAEU,YAAc,IAAMV,EAAEW,UAAY,IAAMX,EAAEY,cAAgB,IAAMN,EAAQ,IAAMJ,EAAUM,EAoB7DK,CAAWtB,EAAMC,eAAesB,W,YCvDxG,SAASC,EAAUxB,GACf,OACI,yBAAKpB,UAAU,wBACX,yBAAKA,UAAU,yBACX,kBAAC,IAAD,CAAK6C,KAAMzB,EAAMyB,KACbC,QAAS,CACLC,MAAO,CACHC,SAAS,EACTC,KAAK,WAAD,OAAa7B,EAAMyB,KAAKK,SAAS,GAAGC,OACxCC,SAAU,GACVC,UAAU,WAEdC,OAAQ,CACJN,SAAS,EACTO,SAAU,QACVF,UAAU,gB,IAQjBG,E,kDACjB,WAAYpC,GAAQ,IAAD,8BACf,cAAMA,IACDqC,MAAQ,CACTC,kBAAmB,IAHR,E,4DAMHC,EAAcC,GAC1B,IAAMf,EAAO,CACTgB,OAAQ,GACRX,SAAU,CAAC,CACPC,MAAO,GACPN,KAAM,GACNiB,gBAAiB,CACb,uBACA,uBACA,uBACA,uBACA,2BAIZjB,EAAKK,SAAS,GAAGC,MAAQS,EACzB,IAAK,IAAIG,EAAI,EAAGA,EAAIJ,EAAazB,OAAQ6B,IACrClB,EAAKgB,OAAOG,KAAK,IAAIlC,KAAK6B,EAAaI,GAAGpB,QAAQsB,gBAClDpB,EAAKK,SAAS,GAAGL,KAAKmB,KAAKL,EAAaI,GAAGxC,KAAKqC,IAEpD,OAAOf,I,+BAED,IAAD,OACCc,EAAeO,KAAK9C,MAAM+C,aAAaC,MAAM,EAAG,GACtD,GAAIT,EAAazB,OAAS,EAAG,CACzB,IAAMmC,EAAS,CAAC,WAAY,aAAaC,KAAI,SAACV,EAAMG,GAChD,OAAO,kBAACnB,EAAD,CAAWC,KAAM,EAAK0B,gBAAgBZ,EAAcC,GAAOY,IAAKb,EAAaI,GAAGnC,QAE3F,OACI,yBAAK5B,UAAU,aACVqE,GAKT,MACI,O,GA3CmBI,aClB7BC,EACC,mCADDA,EAEK,2CAGX,SAASC,EAAYC,GACnB,IAAIhD,EAAK,IAAIE,KAAgB,IAAX8C,GAIlB,OAHQhD,EAAGQ,WAEC,KADJ,IAAMR,EAAGI,cACG6C,QAAQ,GAI9B,SAASC,EAAc1D,GACrB,OACE,yBAAKpB,UAAU,oBACb,yBAAKA,UAAU,2BAA0B,4BAAKoB,EAAM2D,KAAX,MAAoB3D,EAAM4D,UACnE,yBAAKhF,UAAU,yBACb,4BACE,8CADF,OACiC,8BAAOiB,KAAKgE,MAAMC,SAAS9D,EAAM+D,OAAOC,KAAKC,QAAQ,IAArD,MAA6DpE,KAAKgE,MAAMC,SAAS9D,EAAM+D,OAAOG,KAAKD,QAAQ,MAE5I,wBAAIrF,UAAU,WACZ,0CADF,OAC6B,8BAAO2E,EAAYvD,EAAMmE,SAAS,uBAAGvF,UAAU,oBAE5E,wBAAIA,UAAU,WACZ,yCADF,OAC4B,8BAAO2E,EAAYvD,EAAMoE,QAAQ,uBAAGxF,UAAU,qB,IAO7DyF,E,kDACnB,WAAYrE,GAAQ,IAAD,8BACjB,cAAMA,IAWRsE,gBAZmB,uCAYD,WAAOC,GAAP,iBAAAC,EAAA,yDACE,UAAdD,EAAMnB,IADM,iCAESqB,MAAM,GAAD,OAAInB,EAAJ,sBAA6B,EAAKjB,MAAMqC,SAAxC,kBAA0DpB,IAFxE,cAERqB,EAFQ,gBAGSA,EAASC,OAHlB,UAGRC,EAHQ,OAIdC,QAAQC,IAAIF,GACQ,OAAhBA,EAASG,IALC,wBAMZC,MAAM,0BANM,2BASd,EAAKC,SAAS,CACZ3C,aAAcsC,EAASM,KACvBC,SAAUP,EAASlB,OAXP,4CAZC,sDAEjB,EAAK0B,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKhB,gBAAkB,EAAKA,gBAAgBgB,KAArB,gBACvB,EAAKjD,MAAQ,CACXqC,SAAU,GACVnC,kBAAcgD,EACdH,cAAUG,EACVC,UAAW,IARI,E,mDA+BjB,OAAO,kBAAC9B,EAAD,CAAeK,OAAQjB,KAAKT,MAAM+C,SAASK,MAChDtB,QAASrB,KAAKT,MAAM+C,SAASjB,QAC7BC,OAAQtB,KAAKT,MAAM+C,SAAShB,OAC5BT,KAAMb,KAAKT,MAAM+C,SAASM,KAC1B9B,QAASd,KAAKT,MAAM+C,SAASxB,Y,4CAIV,IAAD,OAWpB,OAVAd,KAAKT,MAAMmD,UAAY,GAUhB1C,KAAKT,MAAME,aAAaW,KAAI,SAACyC,EAAiBhD,GAEnD,GAAIA,EAAI,EAEN,OADA,EAAKN,MAAMmD,UAAU5C,KAAK+C,GACnB,kBAAC,EAAD,CAAiB1F,eAAgB0F,EAAiBvC,IAAKuC,EAAgBnF,U,mCAMvErB,GACX2D,KAAKoC,SAAS,CACZR,SAAUvF,EAAEyG,OAAOvG,U,+BAIrB,OACE,kBAAC,IAAD,KACE,yBAAKT,UAAU,aACb,kBAACF,EAAD,CAAQU,WAAY0D,KAAKuC,aAAc/F,MAAOwD,KAAK4B,SAAUlF,QAASsD,KAAKwB,kBAC3C,oBAAvBxB,KAAKT,MAAM+C,SAClBtC,KAAKa,OACL,GAEF,yBAAK/E,UAAU,aACuB,oBAA3BkE,KAAKT,MAAME,aAClBO,KAAK+C,sBACL,IAGJ,kBAAC,EAAD,CAAO9C,aAAcD,KAAKT,MAAMmD,kB,GAjFTnC,aC5BbyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,a","file":"static/js/main.3fc75363.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(prop) {\r\n\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark\">\r\n            <a className=\"navbar-brand\" style={{ 'margin': 'auto' }}><span className=\"my-logo\">W</span>Reader</a>\r\n            <div className=\"collapse navbar-collapse\" id=\"navbm\" style={{ 'display': 'block' }}>\r\n                <ul className=\"navbar-nav mr-auto text-center\">\r\n                    {/* <li className=\"nav-item\">\r\n                        <Link to=\"/\" className=\"nav-link\">5 Days forecast data</Link>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <Link to=\"/\" className=\"nav-link\">Hourly data</Link>\r\n                    </li> */}\r\n                </ul>\r\n                <div>\r\n                    <input type=\"text\"\r\n                        className=\"form-control mr-sm-2 my-searchbar\"\r\n                        placeholder=\"Search...\"\r\n                        spellCheck=\"false\"\r\n                        onChange={(e) => prop.changeCity(e)}\r\n                        value={prop.cname}\r\n                        onKeyPress={(e) => prop.getData(e)} />\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n","import React from 'react';\r\n\r\nfunction getWeatherIcone(rangeId) {\r\n    switch (true) {\r\n        case rangeId >= 200 && rangeId <= 232:\r\n            return \"wi wi-thunderstorm\";\r\n            break;\r\n        case rangeId >= 300 && rangeId <= 321:\r\n            return \"wi wi-rain\";\r\n            break;\r\n        case rangeId >= 500 && rangeId <= 531:\r\n            return \"wi wi-hail\";\r\n            break;\r\n        case rangeId >= 600 && rangeId <= 622:\r\n            return \"wi wi-snow\";\r\n            break;\r\n        case rangeId >= 701 && rangeId <= 781:\r\n            return \"wi wi-cloudy-windy\";\r\n            break;\r\n        case rangeId == 800:\r\n            return \"wi wi-day-sunny\";\r\n            break;\r\n        case rangeId >= 801 && rangeId <= 804:\r\n            return \"wi wi-cloud\";\r\n            break;\r\n    }\r\n}\r\nfunction calCelsius(temp) {\r\n    return Math.floor(temp - 273.15);\r\n}\r\n\r\nfunction formatAMPM(dt) {\r\n    var d = new Date(dt),\r\n        minutes = d.getMinutes().toString().length == 1 ? '0' + d.getMinutes() : d.getMinutes(),\r\n        hours = d.getHours().toString().length == 1 ? '0' + d.getHours() : d.getHours(),\r\n        ampm = d.getHours() >= 12 ? 'pm' : 'am',\r\n        months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\r\n        days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n    return days[d.getDay()] + ' ' + months[d.getMonth()] + ' ' + d.getDate() + ' ' + d.getFullYear() + ' ' + hours + ':' + minutes + ampm;\r\n}\r\n\r\nexport default function ForecastWheather(props) {\r\n    return (\r\n        <div className=\"card my-forecastcard\">\r\n            <div className=\"card-body text-center\">\r\n                <h1>\r\n                    <i className={getWeatherIcone(props.forecastDetail.weather[0].id)}></i>\r\n                </h1>\r\n                <h6 className=\"my-font\">\r\n                    <span>Humadity:</span>&nbsp;<span>{props.forecastDetail.main.humidity}%</span>\r\n                </h6>\r\n                <h6 className=\"my-font\">\r\n                    <span>High temp:</span>&nbsp;<span>{calCelsius(props.forecastDetail.main.temp_max)}<i className=\"wi wi-celsius\"></i></span>\r\n                </h6>\r\n                <h6 className=\"my-font\">\r\n                    <span>Low temp:</span>&nbsp;<span>{calCelsius(props.forecastDetail.main.temp_min)}<i className=\"wi wi-celsius\"></i></span>\r\n                </h6>\r\n                <p className=\"card-text\" style={{'font-weight':'600'}}>{props.forecastDetail.weather[0].description}</p>\r\n                <p className=\"card-text\" style={{'font-weight':'700'}}>{formatAMPM(props.forecastDetail.dt_txt)}</p>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}","import React, { Component } from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\n\r\nfunction ChartCard(props) {\r\n    return (\r\n        <div className=\"card my-forecastcard\">\r\n            <div className=\"card-body text-center\">\r\n                <Bar data={props.data}\r\n                    options={{\r\n                        title: {\r\n                            display: true,\r\n                            text: `Highest ${props.data.datasets[0].label}`,\r\n                            fontSize: 15,\r\n                            fontColor:'#e0e0e0'\r\n                        },\r\n                        legend: {\r\n                            display: true,\r\n                            position: 'right',\r\n                            fontColor:'#e0e0e0'\r\n                        }\r\n                    }} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default class Chart extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            formatedChartData: {}\r\n        }\r\n    }\r\n    createChartData(forecastData, item) {\r\n        const data = {\r\n            labels: [],\r\n            datasets: [{\r\n                label: '',\r\n                data: [],\r\n                backgroundColor: [\r\n                    \"rgba(255,99,132,0.6)\",\r\n                    \"rgba(54,162,235,0.6)\",\r\n                    \"rgba(255,206,86,0.6)\",\r\n                    \"rgba(75,192,192,0.6)\",\r\n                    \"rgba(209,76,192,0.6)\"\r\n                ]\r\n            }]\r\n        };\r\n        data.datasets[0].label = item;\r\n        for (var i = 0; i < forecastData.length; i++) {\r\n            data.labels.push(new Date(forecastData[i].dt_txt).toDateString())\r\n            data.datasets[0].data.push(forecastData[i].main[item])\r\n        }\r\n        return data;\r\n    }\r\n    render() {\r\n        const forecastData = this.props.chartDetails.slice(0, 5);\r\n        if (forecastData.length > 0) {\r\n            const charts = ['humidity', 'sea_level'].map((item, i) => {\r\n                return <ChartCard data={this.createChartData(forecastData, item)} key={forecastData[i].dt} />\r\n            })\r\n            return (\r\n                <div className=\"card-deck\">\r\n                    {charts}\r\n                </div>\r\n            )\r\n        }\r\n        else {\r\n            return (\r\n                ''\r\n            )\r\n        }\r\n    }\r\n}","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"weather-icons/css/weather-icons.min.css\";\nimport Navbar from \"./components/navbar.component\";\nimport ForecastWeather from \"./components/forecastwheather.component\";\nimport Chart from \"./components/chart.component\";\n\nconst api = {\n  key: \"75c2f32c4a3d2df99698c0e8fa6033a3\",\n  baseUrl: \"https://api.openweathermap.org/data/2.5/\"\n}\n\nfunction convertTime(unixTime) {\n  let dt = new Date(unixTime * 1000)\n  let h = dt.getHours()\n  let m = \"0\" + dt.getMinutes()\n  let t = h + \":\" + m.substr(-2)\n  return t\n}\n\nfunction CityComponent(props) {\n  return (\n    <div className=\"card my-citycard\">\n      <div className=\"card-header text-center\"><h2>{props.city} , {props.country}</h2></div>\n      <div className=\"card-body text-center\">\n        <h6>\n          <span>Coordinates:</span>&nbsp;<span>{Math.round(parseInt(props.coords.lat).toFixed(4))} , {Math.round(parseInt(props.coords.lon).toFixed(4))}</span>\n        </h6>\n        <h6 className=\"my-font\">\n          <span>Sunrise:</span>&nbsp;<span>{convertTime(props.sunrise)}<i className=\"wi wi-sunrise\"></i></span>\n        </h6>\n        <h6 className=\"my-font\">\n          <span>Sunset:</span>&nbsp;<span>{convertTime(props.sunset)}<i className=\"wi wi-sunset\"></i></span>\n        </h6>\n      </div>\n    </div>\n  )\n}\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props)\n    this.onChangeCity = this.onChangeCity.bind(this);\n    this.getWheatherData = this.getWheatherData.bind(this);\n    this.state = {\n      cityName: \"\",\n      forecastData: undefined,\n      cityData: undefined,\n      chartData: []\n    }\n  }\n\n  getWheatherData = async (event) => {\n    if (event.key === \"Enter\") {\n      const api_call = await fetch(`${api.baseUrl}forecast?q=${this.state.cityName}&appid=${api.key}`);\n      const response = await api_call.json();\n      console.log(response);\n      if (response.cod != \"200\") {\n        alert(\"enter proper city name\")\n        return\n      }\n      this.setState({\n        forecastData: response.list,\n        cityData: response.city,\n      })\n\n      // if (response.cod != \"200\") this.setState({ chartData: [] })\n    }\n  }\n\n  city() {\n    return <CityComponent coords={this.state.cityData.coord}\n      sunrise={this.state.cityData.sunrise}\n      sunset={this.state.cityData.sunset}\n      city={this.state.cityData.name}\n      country={this.state.cityData.country} />\n  }\n\n\n  forecastWeatherList() {\n    this.state.chartData = [];\n    // return this.state.forecastData.map((currentexercise, i) => {\n    //   if (i != 0) {\n    //     if (i % 7 == 0 && i < 35) {\n    //       i--;\n    //       this.state.chartData.push(currentexercise);\n    //       return <ForecastWeather forecastDetail={currentexercise} key={currentexercise.dt} />\n    //     }\n    //   }\n    // })\n    return this.state.forecastData.map((currentexercise, i) => {\n      // if (i != 0) {\n      if (i < 5) {\n        this.state.chartData.push(currentexercise);\n        return <ForecastWeather forecastDetail={currentexercise} key={currentexercise.dt} />\n      }\n      // }\n    })\n  }\n\n  onChangeCity(e) {\n    this.setState({\n      cityName: e.target.value\n    })\n  }\n  render() {\n    return (\n      <Router>\n        <div className=\"container\">\n          <Navbar changeCity={this.onChangeCity} cname={this.cityName} getData={this.getWheatherData} />\n          {(typeof this.state.cityData != 'undefined') ?\n            this.city() :\n            ''\n          }\n          <div className=\"card-deck\">\n            {(typeof this.state.forecastData != 'undefined') ?\n              this.forecastWeatherList() :\n              ''\n            }\n          </div>\n          <Chart chartDetails={this.state.chartData} />\n        </div>\n      </Router>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}